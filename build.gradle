plugins {
    id 'org.springframework.boot' version '2.7.4'
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
    id 'java'
    id 'jacoco'
    id 'io.freefair.lombok' version '6.3.0'
    id 'com.google.cloud.tools.jib' version '3.3.0'
    id 'de.undercouch.download' version '5.1.2'
    id 'io.sentry.jvm.gradle' version '4.3.0'
}

group = 'io.kontur'
version = '1.17.0'
sourceCompatibility = '17'
String imageTag = System.getenv("IMAGE_TAG") ?: 'latest'

repositories {
    mavenCentral()
}


sentry {
  // Generates a JVM (Java, Kotlin, etc.) source bundle and uploads your source code to Sentry.
  // This enables source context, allowing you to see your source
  // code as part of your stack traces in Sentry.
  includeSourceContext = true

  org = System.getenv("SENTRY_ORG")
  projectName = "layers-api"
  authToken = System.getenv("SENTRY_AUTH_TOKEN")
  includeSourceContext = System.getenv("SENTRY_AUTH_TOKEN") ? true : false
}

dependencies {
    //model
    implementation 'org.wololo:jts2geojson:0.18.1'
    implementation 'org.locationtech.jts.io:jts-io-common:1.19.0'

    //json logging
    implementation 'ch.qos.logback.contrib:logback-jackson:0.1.5'
    implementation 'ch.qos.logback.contrib:logback-json-classic:0.1.5'

    //spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //spring security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    //swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.11'

    //health
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus:1.9.4'

    //liquibase
    implementation 'org.liquibase:liquibase-core:4.16.1'

    //postgresql
    runtimeOnly 'org.postgresql:postgresql'

    //mybatis
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'

    //testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:postgresql:1.17.4'
    testImplementation 'com.jayway.jsonpath:json-path-assert:2.7.0'
    testImplementation 'org.hamcrest:hamcrest-core:2.2'
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group.startsWith('com.fasterxml.jackson')) {
            details.useVersion '2.14.0-rc2'
            details.because 'fixes critical vulnerability in lower versions'
        }
    }
}

test {
    useJUnitPlatform()
    maxHeapSize = "512m"
    finalizedBy("jacocoTestReport")
    systemProperty 'spring.profiles.active', 'test-run'
}

jacocoTestReport {
    reports {
        csv.enabled true
        csv.destination file("${buildDir}/jacoco.csv")
    }
}

jar {
    enabled = false
}

jib {
    from {
        image = 'nexus.kontur.io:8084/library/openjdk:17-alpine'
    }
    to {
        image = "nexus.kontur.io:8085/konturdev/${project.name}:${imageTag}"
        tags = ["${imageTag}"]
    }
    container {
        mainClass 'io.kontur.layers.LayersApiApplication'

        jvmFlags = ['-server', '-XX:+HeapDumpOnOutOfMemoryError',
                    '-javaagent:/opentelemetry/opentelemetry-javaagent.jar',
                    '-XX:HeapDumpPath=/tmp/ups_oom.hprof']
        //if GC log is required: '-Xlog:gc*:file=/tmp/user-profile-api.GC.log'
    }
    extraDirectories {
        paths {
            path {
                from = "${buildDir}/../jib/"
                into = '/opentelemetry/'
            }
        }
    }
}

task downloadFile(type: Download) {
    src 'https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/download/v1.16.0/opentelemetry-javaagent.jar'
    dest "${buildDir}/../jib/opentelemetry-javaagent.jar"
    onlyIfModified true
}

task verifyFile(type: Verify, dependsOn: downloadFile) {
    dependsOn downloadFile
    src new File("${buildDir}/../jib/", 'opentelemetry-javaagent.jar')
    algorithm 'MD5'
    checksum '4f97ebd74d075e60c76ecdf47b61006a'
}

tasks.jib.dependsOn(verifyFile)
tasks.jibDockerBuild.dependsOn(verifyFile)
