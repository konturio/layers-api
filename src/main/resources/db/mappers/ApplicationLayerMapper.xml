<!DOCTYPE mapper     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.kontur.layers.repository.ApplicationLayerMapper">

    <select id="getApplicationLayersRules" resultType="io.kontur.layers.repository.model.ApplicationLayer">
        select app_id               as appId,
               layer_id             as layerId,
               is_default           as isDefault,
               display_rule         as displayRule,
               legend_style_config  as legendStyle
        from apps_layers
        where app_id = #{appId};
    </select>

    <select id="upsertLayers" resultType="io.kontur.layers.repository.model.ApplicationLayer">
        with ins as (INSERT INTO apps_layers (app_id, layer_id, is_default, display_rule, legend_style_config)
            VALUES
            <foreach collection="layers" item="item" open="(" separator="),(" close=")">
                #{appId}, #{item.layerId}, #{item.isDefault}, #{item.displayRule}::jsonb, #{item.legendStyle}::jsonb
            </foreach>
        ON CONFLICT (app_id, layer_id)
            DO UPDATE SET (is_default, display_rule, legend_style_config) =
            (EXCLUDED.is_default, EXCLUDED.display_rule, EXCLUDED.legend_style_config)
        RETURNING *)
        select
            app_id as appId,
            layer_id as layerId,
            is_default as isDefault,
            display_rule as displayRule,
            legend_style_config as legendStyle
        from ins;
    </select>

    <delete id="deleteAppLayersNotInList">
        delete from apps_layers
        where app_id = #{appId}
        <foreach item="item" index="index" collection="layerIds"
                 open="AND layer_id not in (" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <select id="updateStyleAndDisplayRules" resultType="io.kontur.layers.repository.model.ApplicationLayer">
        with ins as (INSERT INTO apps_layers (app_id, layer_id, legend_style_config, display_rule, map_style_config, popup_config, is_default)
        VALUES (#{appId}, #{layerId}, #{legendStyle}::jsonb, #{displayRule}::jsonb, #{mapStyle}::jsonb, #{popupConfig}::jsonb, false)
        ON CONFLICT (app_id, layer_id)
        DO UPDATE SET (legend_style_config, display_rule, map_style_config, popup_config) =
            (EXCLUDED.legend_style_config, EXCLUDED.display_rule, EXCLUDED.map_style_config, EXCLUDED.popup_config)
        RETURNING *)
        select
            app_id as appId,
            layer_id as layerId,
            is_default as isDefault,
            display_rule as displayRule,
            legend_style_config as legendStyle,
            map_style_config as mapStyle,
            popup_config as popupConfig
        from ins;
    </select>
</mapper>