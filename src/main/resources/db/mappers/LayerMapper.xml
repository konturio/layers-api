<!DOCTYPE mapper     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.kontur.layers.repository.LayerMapper">

    <select id="getOwnedLayer" resultType="io.kontur.layers.repository.model.Layer">
        select id,
               public_id as publicid,
               name as name,
               description,
               copyrights,
               properties,
               group_id,
               category_id,
               last_updated as lastupdated,
               source_updated as sourcelastupdated
        from layers
        where owner = #{userName} and public_id = #{publicId} and is_visible
        for update
    </select>

    <select id="getLayersTotal" resultType="java.lang.Integer">
        with
        <if test="geometry != null">
            g as (select ST_GeomFromGeoJSON(#{geometry}) as inpgeom),
        </if>
        lrsids as (select l.id
        from
        layers l
        where is_visible
        <if test="publicIds != null">
            <foreach collection="publicIds" item="id" open="and l.public_id in (" separator="," close=")">
                #{id}
            </foreach>
        </if>
        <choose>
            <when test="geometry != null">
                and (st_intersects(l.geom, (select inpgeom from g))
                    or is_global)
            </when>
            <when test="geometry == null and omitLocalCollections">
                and is_global
            </when>
        </choose>
        <choose>
            <when test="appId != null and !showAllPublic">
                and l.public_id in (select layer_id from apps_layers where app_id = #{appId})
            </when>
            <when test='collectionOwner.name().equals("ME")'>
                and owner = #{userName}
            </when>
            <when test='collectionOwner.name().equals("NOT_ME")'>
                and is_public and owner != #{userName}
            </when>
            <when test="userName != null">
                and (is_public or owner = #{userName})
            </when>
            <otherwise>
                and is_public
            </otherwise>
        </choose>
        <if test="geometry != null">
            union
            select l.id
            from
            layers l
            join lateral (
            select
            layer_id
            from
            layers_features as lf
            where
            st_intersects(lf.geom, (select inpgeom from g))
            and l.id = lf.layer_id
            limit 1) as lff on true
            where l.is_visible
            and l.geom is null
            and not l.is_global
            <if test="publicIds != null">
                <foreach collection="publicIds" item="id" open="and l.public_id in (" separator="," close=")">
                    #{id}
                </foreach>
            </if>
            <choose>
                <when test="appId != null and !showAllPublic">
                    and l.public_id in (select layer_id from apps_layers where app_id = #{appId})
                </when>
                <when test='collectionOwner.name().equals("ME")'>
                    and owner = #{userName}
                </when>
                <when test='collectionOwner.name().equals("NOT_ME")'>
                    and is_public and owner != #{userName}
                </when>
                <when test="userName != null">
                    and (is_public or owner = #{userName})
                </when>
                <otherwise>
                    and is_public
                </otherwise>
            </choose>
        </if>
        )
        select count(distinct l.id) AS numberMatched
        from lrsids l
    </select>

    <select id="getLayers" resultType="io.kontur.layers.repository.model.Layer">
        with
        <if test="geometry != null">
            g as (select ST_GeomFromGeoJSON(#{geometry}) as inpgeom),
        </if>
        lrsids as (select l.id
                   from
                        layers l
                   where is_visible
                   <if test="publicIds != null">
                       <foreach collection="publicIds" item="id" open="and l.public_id in (" separator="," close=")">
                       #{id}
                       </foreach>
                   </if>
                   <choose>
                       <when test="geometry != null">
                           and (st_intersects(l.geom, (select inpgeom from g))
                                or is_global)
                       </when>
                       <when test="geometry == null and omitLocalCollections">
                           and is_global
                       </when>
                   </choose>
                   <choose>
                       <when test="appId != null and !showAllPublic">
                           and l.public_id in (select layer_id from apps_layers where app_id = #{appId})
                       </when>
                       <when test='collectionOwner.name().equals("ME")'>
                           and owner = #{userName}
                       </when>
                       <when test='collectionOwner.name().equals("NOT_ME")'>
                           and is_public and owner != #{userName}
                       </when>
                       <when test="userName != null">
                           and (is_public or owner = #{userName})
                       </when>
                       <otherwise>
                           and is_public
                       </otherwise>
                   </choose>
                <if test="geometry != null">
                union
                    select l.id
                    from
                    layers l
                    join lateral (
                        select
                            layer_id
                        from
                            layers_features as lf
                        where
                            st_intersects(lf.geom, (select inpgeom from g))
                            and l.id = lf.layer_id
                        limit 1) as lff on true
                    where l.is_visible
                    and l.geom is null
                    and not l.is_global
                    <if test="publicIds != null">
                        <foreach collection="publicIds" item="id" open="and l.public_id in (" separator="," close=")">
                            #{id}
                        </foreach>
                    </if>
                    <choose>
                        <when test="appId != null and !showAllPublic">
                            and l.public_id in (select layer_id from apps_layers where app_id = #{appId})
                        </when>
                        <when test='collectionOwner.name().equals("ME")'>
                            and owner = #{userName}
                        </when>
                        <when test='collectionOwner.name().equals("NOT_ME")'>
                            and is_public and owner != #{userName}
                        </when>
                        <when test="userName != null">
                            and (is_public or owner = #{userName})
                        </when>
                        <otherwise>
                            and is_public
                        </otherwise>
                    </choose>
                </if>
        )
        select lrs.id,
               lrs.public_id                 as publicid,
               lrs.name                      as name,
               lrs.description,
               lrs.copyrights,
               lrs.properties,
               lrs.group_id,
               lrs.category_id,
               lrs.type,
               lrs.url,
               lrs.api_key                   as apiKey,
               lrs.last_updated              as lastupdated,
               lrs.source_updated            as sourcelastupdated,
               lrs.is_public                 as isPublic,
               lrs.is_visible                as isVisible,
               lrs.feature_properties        as featureProperties,
               lrs.owner                     as owner,
               lrs.tile_size                 as tileSize,
               <if test="appId != null">
                   al.style_rule as styleRule,
                   al.display_rule as displayRule,
               </if>
               json_strip_nulls(json_build_object(
                   'name', gp."name",
                   'isOpened', gp.is_opened,
                   'mutuallyExclusive', gp.mutually_exclusive,
                   'order', gp."order")) as group,
               json_strip_nulls(json_build_object(
                   'name', cp."name",
                   'isOpened', cp.is_opened,
                   'mutuallyExclusive', cp.mutually_exclusive,
                   'order', cp."order")) as category
        from layers as lrs
            <if test="appId != null">
                left join apps_layers al on
                    al.app_id = #{appId} and al.layer_id = lrs.public_id
            </if>
            left join layers_group_properties gp on gp.id = lrs.group_id
            left join layers_category_properties cp on cp.id = lrs.category_id
        where lrs.id in (select id from lrsids)
        order by lrs.id
        limit #{limit} offset #{offset}
    </select>

    <select id="insertLayer" resultType="io.kontur.layers.repository.model.Layer">
        with ins as (insert into layers (public_id, name, description, url, api_key, type, geom, last_updated, source_updated,
                                         copyrights, properties, is_public, owner, is_visible, group_id, feature_properties)
            values (#{publicId}, #{name}, #{description}, #{url}, #{apiKey}, #{type}, ST_GeomFromGeoJSON(#{geometry}), #{lastUpdated},
                    #{sourceLastUpdated}, #{copyrights}, #{properties}::jsonb, #{isPublic}, #{owner}, true,
                    (select id from layers_group_properties where name = 'user_layers'), #{featureProperties}::jsonb)
            returning *)
        select ins.id,
               ins.public_id          as publicId,
               ins.name,
               ins.description,
               ins.url,
               ins.api_key,
               ins.type,
               ins.geom               as geometry,
               ins.last_updated       as lastUpdated,
               ins.source_updated     as sourceLastUpdated,
               ins.copyrights,
               ins.properties,
               ins.is_public          as isPublic,
               ins.is_visible         as isVisible,
               ins.feature_properties as featureProperties,
               ins.owner,
               json_strip_nulls(json_build_object(
                       'name', gp."name",
                       'isOpened', gp.is_opened,
                       'mutuallyExclusive', gp.mutually_exclusive,
                       'order', gp."order")) as group,
               json_strip_nulls(json_build_object(
                       'name', cp."name",
                       'isOpened', cp.is_opened,
                       'mutuallyExclusive', cp.mutually_exclusive,
                       'order', cp."order")) as category
        from ins
            left join layers_group_properties gp on gp.id = ins.group_id
            left join layers_category_properties cp on cp.id = ins.category_id
    </select>

    <select id="updateLayer" resultType="io.kontur.layers.repository.model.Layer">
        with upd as (update layers set (name, description, url, api_key, type, geom, last_updated, source_updated,
                                        copyrights, properties, is_public, feature_properties) =
                (#{name}, #{description}, #{url}, #{apiKey}, #{type}, ST_GeomFromGeoJSON(#{geometry}), #{lastUpdated}, #{sourceLastUpdated},
                 #{copyrights}, #{properties}::jsonb, #{isPublic}, #{featureProperties}::jsonb)
            where public_id = #{publicId} and owner = #{owner}
            returning *)
        select upd.id,
               upd.public_id          as publicId,
               upd.name,
               upd.description,
               upd.url,
               upd.api_key,
               upd.type,
               upd.geom               as geometry,
               upd.last_updated       as lastUpdated,
               upd.source_updated     as sourceLastUpdated,
               upd.copyrights,
               upd.properties,
               upd.is_public          as isPublic,
               upd.is_visible         as isVisible,
               upd.feature_properties as featureProperties,
               upd.owner,
               json_strip_nulls(json_build_object(
                       'name', gp."name",
                       'isOpened', gp.is_opened,
                       'mutuallyExclusive', gp.mutually_exclusive,
                       'order', gp."order")) as group,
               json_strip_nulls(json_build_object(
                       'name', cp."name",
                       'isOpened', cp.is_opened,
                       'mutuallyExclusive', cp.mutually_exclusive,
                       'order', cp."order")) as category
        from upd
            left join layers_group_properties gp on gp.id = upd.group_id
            left join layers_category_properties cp on cp.id = upd.category_id
    </select>


    <select id="deleteLayer" resultType="io.kontur.layers.repository.model.Layer">
        with del as (delete from layers
            where public_id = #{id} and owner = #{owner}
            returning *)
        select public_id          as publicId,
               name,
               description,
               url,
               api_key,
               type,
               geom               as geometry,
               last_updated       as lastUpdated,
               source_updated     as sourceLastUpdated,
               copyrights,
               properties,
               is_public          as isPublic,
               is_visible         as isVisible,
               feature_properties as featureProperties,
               owner
        from del
    </select>

    <select id="getApplicationLayers" resultType="io.kontur.layers.repository.model.Layer">
        select id,
               public_id          as publicId,
               name,
               description,
               url,
               type,
               geom               as geometry,
               last_updated       as lastUpdated,
               source_updated     as sourceLastUpdated,
               copyrights,
               properties,
               is_public          as isPublic,
               is_visible         as isVisible,
               feature_properties as featureProperties,
               owner
        from layers
        where is_visible
          and public_id in (select layer_id
                    from apps_layers
                    where app_id = #{appId}
                    <if test="getDefaultOnly == true">
                        and is_default
                    </if>
              );
    </select>
</mapper>