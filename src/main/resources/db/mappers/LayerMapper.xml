<!DOCTYPE mapper     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.kontur.layers.repository.LayerMapper">

    <select id="getLayerName" resultType="string">
        select name from layers where public_id = #{publicId}
                                  and is_visible
        <choose>
            <when test="userName != null">
                and (is_public or owner = #{userName})
            </when>
            <otherwise>
                and is_public
            </otherwise>
        </choose>
    </select>

    <select id="getOwnedLayer" resultType="io.kontur.layers.repository.model.Layer">
        select id,
               public_id as publicid,
               name as name,
               description,
               copyrights,
               properties,
               group_id,
               category_id,
               last_updated as lastupdated,
               source_updated as sourcelastupdated
        from layers
        where owner = #{userName} and public_id = #{publicId} and is_visible
        for update
    </select>


    <select id="getLayers" resultType="io.kontur.layers.repository.model.Layer">
        with lrs as (select l.id,
                          l.public_id as publicid,
                          l.name as name,
                          l.description,
                          l.copyrights,
                          l.properties,
                          l.group_id,
                          l.category_id,
                          l.type,
                          l.url,
                          l.last_updated   as lastupdated,
                          l.source_updated as sourcelastupdated,
                          l.is_public      as isPublic,
                          l.is_visible     as isVisible,
                          l.display_rule   as legend,
                          count(*) OVER() AS numberMatched
                   from layers l
                   where is_visible
                   <if test="publicIds != null">
                       <foreach collection="publicIds" item="id" open="and l.public_id in (" separator="," close=")">
                       #{id}
                       </foreach>
                   </if>
                   <if test="geometry != null">
                       and ((l.geom isnull
                                and l.id in (select layer_id
                                            from layers_features ls
                                            where ST_Intersects(ls.geom, ST_SetSRID(ST_GeomFromGeoJSON(#{geometry}), 4326))))
                           or ST_Intersects(l.geom, ST_SetSRID(ST_GeomFromGeoJSON(#{geometry}), 4326)))
                   </if>
                   <choose>
                       <when test="userName != null">
                           and (is_public or owner = #{userName})
                       </when>
                       <otherwise>
                           and is_public
                       </otherwise>
                   </choose>
                   group by l.id limit #{limit} offset #{offset}),
        ext as (select f.layer_id,
                   st_3dextent(f.geom) as spat,
                   min(f.last_updated) as lowerdt,
                   max(f.last_updated) as upperdt
                   from layers_features f join lrs on lrs.id = f.layer_id
                   group by f.layer_id)
        select lrs.*,
               case when ext.spat is not null then
                    format('[%s,%s,%s,%s,%s,%s]',
                           st_xmin(ext.spat), st_ymin(ext.spat), st_zmin(ext.spat),
                           st_xmax(ext.spat), st_ymax(ext.spat), st_zmax(ext.spat))
               end as spatialextent,
               case when (lowerdt is not null or upperdt is not null ) then
                    tstzrange(lowerdt, upperdt, format('%s%s', '[', ']' ))
               end as temporalextent,
               ls.style_rule as legend,
               json_strip_nulls(json_build_object(
                   'name', gp."name",
                   'isOpened', gp.is_opened,
                   'mutuallyExclusive', gp.mutually_exclusive,
                   'order', gp."order")) as group,
               json_strip_nulls(json_build_object(
                   'name', cp."name",
                   'isOpened', cp.is_opened,
                   'mutuallyExclusive', cp.mutually_exclusive,
                   'order', cp."order")) as category
        from lrs
            left join ext on lrs.id = ext.layer_id
            left join layers_style ls on ls.layer_id = lrs.id
            left join layers_group_properties gp on gp.id = lrs.group_id
            left join layers_category_properties cp on cp.id = lrs.category_id
    </select>

    <select id="insertLayer" resultType="io.kontur.layers.repository.model.Layer">
        with ins as (insert into layers (public_id, name, description, url, type, geom, last_updated, source_updated,
                                         copyrights, properties, is_public, owner, display_rule, is_visible)
            values (#{publicId}, #{name}, #{description}, #{url}, #{type}, #{geometry}::geometry, #{lastUpdated},
                    #{sourceLastUpdated}, #{copyrights}, #{properties}::jsonb, #{isPublic}, #{owner}, #{legend}::jsonb, true)
            returning *)
        select public_id      as publicId,
               name,
               description,
               url,
               type,
               geom           as geometry,
               last_updated   as lastUpdated,
               source_updated as sourceLastUpdated,
               copyrights,
               properties,
               is_public      as isPublic,
               is_visible     as isVisible,
               owner,
               display_rule   as legend
        from ins
    </select>

    <select id="updateLayer" resultType="io.kontur.layers.repository.model.Layer">
        with upd as (update layers set (name, description, url, type, geom, last_updated, source_updated,
                                        copyrights, properties, is_public, display_rule) =
                (#{name}, #{description}, #{url}, #{type}, #{geometry}::geometry, #{lastUpdated}, #{sourceLastUpdated},
                 #{copyrights}, #{properties}::jsonb, #{isPublic}, #{legend}::jsonb)
            where public_id = #{publicId} and owner = #{owner}
            returning *)
        select public_id      as publicId,
               name,
               description,
               url,
               type,
               geom           as geometry,
               last_updated   as lastUpdated,
               source_updated as sourceLastUpdated,
               copyrights,
               properties,
               is_public      as isPublic,
               is_visible     as isVisible,
               owner,
               display_rule   as legend
        from upd
    </select>


    <select id="deleteLayer" resultType="io.kontur.layers.repository.model.Layer">
        with del as (delete from layers
            where public_id = #{id} and owner = #{owner}
            returning *)
        select public_id      as publicId,
               name,
               description,
               url,
               type,
               geom           as geometry,
               last_updated   as lastUpdated,
               source_updated as sourceLastUpdated,
               copyrights,
               properties,
               is_public      as isPublic,
               is_visible     as isVisible,
               owner,
               display_rule   as legend
        from del
    </select>
</mapper>